	Python
	---------



print  =>  ???


type of x => ?
x=10
type of x => ?
x="abcdef"
type of x => ?


program => code + data

data => variables + constants
code => function bodies

variables
-------------
integer     i1=10
long         l1=123456L
float         f1=12.34
string       str1='abc'
                         ''abd"
                        '''abc'''
                     """abc"""

Operators
---------------
Assignment => study operators with precedence

deleted
-----------
++   --

added
-----------
2+3          =>    5
'2'+'3'      =>    '23'
'2'+3        =>   NP
2*3          =>    6
'2'*3        =>    '222'
'2'*'3'      =>    NP
2**3        =>    8
:             =>    slicing

changed
------------
Logical             ||    &&     !
                         or   and   not

a=3
b=4
c=(a or b)
#c=(a or b)
print c

z=not 10     #verify with -10, verify with 0 also
print z

program control flow constructs
----------------------------------------------
if (expr1):
	st1
                  st2
elif (expr2):
	st3
	st4
else:
	st5
	st6
st7

while (expr3):
	st8
	st9

break
continue

NA => switch , do while, goto
Later => for

Expts (hands on) to do now
---------------------------------------
1. User enters a number. Write a program to 
    find whether the number entered is equal
    to 100 or less than 100 or greater than 100
    and print the message accordingly.
2. Print numbers from 1 to 10
3. Copy the code of expt 2. Do not change the
    expr. Change the body. Print 1 to 5.
4. Copy the code of expt 2. Do not change the
    expr. Change the body. Print 1 to 10 except 5.
5. User enters day of the week. If entered day is 
    monday or tuesday or wednesday or thursday
    or friday, print working day. If user enters 
    saturday, print play cricket. If user enters
    sunday, print sleep.
6. Output, input, dyn typing
7. Operators  


An object
-------------

What is an object?

str1="SG France"


x=10
x="abcdef"

>>>str1="SG France")
>>>dir(str1)
>>>type(str1.replace)
>>>help(str1.replace)
>>>str1.replace("France", "India")
>>>str1
>>>str1=str1.replace("France", "India")
>>>str1
>>>str1="abc def abc"
>>>str1.replace("abc", "ijk")
>>>str1.replace("abc", "ijk", 1)

>>>x=10
>>>dir(x)
>>>type(x.real)
>>>print x.real
>>>type(x.conjugate)
>>>help(x.conjugate)

-----------------------------------------------------------
very common   very frequent    keyword      print 
very common   less frequent     builtin          input
       specific   attribute/method=>object  real/conjugate=>integer
---------------------------------------------------------------------------------

Containers
----------------

1. list
lst1 = [10, "hi", "20"]

print lst1[0]
lst1[0]=90


a) print the whole list - print keyword
b) print eles of the list one by one using i) while ii) for
c) insert 30 at the beg - insert method
d) insert 40 at pos 1 - insert method
e) insert 50 at the end - append method
f) delete ele at pos 1 - del keyword
g) delete ele at pos 1 and print the deleted item - pop method
h) delete ele by value - remove method
i) print number of eles of the list - len builtin

for ele in lst1:
	print ele

How to use
-----------------
Keyword     keyword WhatEverIsToBeDone
builtin         builtin()
attribute     object.attribute
method      object.method()


2. tuple
tup1 = (10, "hi", "20")

print tup1[0]    -   P/NP?
tup1[0]=30       -   P/NP?


tup1=(10,20,30)
tup1=(10,20,30,40)
tup1="hi"
--------------------------------------
Methods=> count, index






3. dictionary

dct1={10:20,      30:40}
           pair          pair
         key value  key value

print dct1
print dct1[10]

dct1[50]=70     #add a pair
del dct1[10]     #delete a pair


1. dct1.keys()
2. dct1.values()
3. dct1.has_key(50)

dct1={1000:{9876324510:["Sachin", 7]}}
print dct1
print dct1[1000]
print dct1[1000][9876324510]
print dct1[1000][9876324510][0]
print dct1[1000][9876324510][1]
dct1[1000][9876324510].insert(1, "IT")
print dct1
------------------------------------------------------------------------------------------


>>>import math
>>>dir(math)
>>>type(math.pi)
>>>print math.pi
>>>type(math.sin)
>>>help(math.sin)


>>>dir()
>>>dir(__builtins__)

>>>help()
   help>keywords
          >del
          >modules
          >math

------------------------
>>>help("keywords")
>>>help("modules")
>>>help("del")
--------------------------------------------------------------------------------------








Expts
---------
1. Print names of all a) keywords b) builtins c) modules
2. Create a) empty list                  b) list with 1 ele 
                c) an empty tuple          d) tuple with 1 ele
                e) an empty dictionary  f) dictionary with 1 pair
3. Work with fibonascii series
4. Work with prime numbers
5. Study builtins a) range b) cmp
6. Given a number in decimal form (base 10), print the
    value in different number systems (binary, hexa, octal)
7. Print the value of a) pi b) sin 90 degrees
8. Write a program to change the directory
9. Write a program to clear the screen. Code needs to work
    both on windows and linux
10. Write a program to print python version
11. Write a program to work with command line arguments
12 a) take the back up b) test your code on linux c) with 3.x 

c:\python27>python.exe   c:...\sample.py 10 20


a.b
x.y()
i=j()













Day 1 => Basics, Containers, Modules
Day 2 => Functions, Files, Exceptions

Negative index
---------------------
lst1=[10,20,30]

print lst1[0],   lst1[1], lst1[2]
print lst1[-1], lst1[-2], lst1[-3]

Slicing
----------
lst1=[10,20,30,40,50]
print lst1[1:4]  
print lst1[:3]    
print lst1[1:]       
print lst1[:]  

Generic form
               lst1[             :                 :                ]
                       start        end            step
print lst1[ :  :2]
print lst1[1: :2]

Sequences
----------------
lst1=[10,20,(30,40)]
print lst1;    print lst1[0];   print lst1[1]; print lst1[2]; 
print lst1[2][0]; print lst1[2][1]

tup1=(50,60,[70,80])
tup1[2].insert(1,90)
print tup1




-------------------------------------------------------------

sample1.py
-----------------
a=10
def fn1():
       """This is fn1 function"""
--------------------------------------------------------------
>>>import sample1
>>>dir(sample1)
>>>type(sample1.a)
>>>print sample1.a
>>>type(sample1.fn1)
>>>help(sample1.fn1)
------------------------------------------------------------------------------------------
If module is in another folder, how do we import?
import sys
sys.path.append("       ")
                               folder path where your module is present
import sample1
------------------------------------------------------------------------------------------
While working on Windows
* file extension                                   a.txt.txt
* special characters in the path       c:\admin\temp\new
                                                                \a         \t       \n
                                                             c:\\admin\\temp\\new
-------------------------------------------------------------------------------------------

















Functions
---------------
def test1():
	print "I am in test1"
test1()
----------------------------------------------------
def test2():
	return "I am in test2"
test2()  #no o/p
x=test2()
print x
#or
print test2()
-----------------------------------------------------
def test3(a, b):
	print a, b
test3(10, 20)
----------------------------------------------------
x=30
y=40
def test4(a, b):
	print a, b
test4(x, y)
----------------------------------------------------












#move x and y a) above b) below invocation and test
------------------------------------------------------------------------------

Exercise
--------------
#########################################################
#####################CALCULATOR########################
#########################################################
	1. simple calc  2. sci calc  3. exit
	simple calc
	-----------------
	1. add	2. sub	3. mul	4. div	5. go back
	sci calc
	-----------------
	1. sin	2. cos	3. power of 4. sqaure root 5. go back
---------------------------------------------------------------------------
* Menu driven=> ask the choice from user
* Check for invalid chloice
* Implement with two files=> menu.py and ops.py
* Put doc strings
* Clearing screen should be used to move from 
   one menu to another
* Use string methods like center
* Give meaningful names for variables and functions  
----------------------------------------------------------------------------





-----------------------------------------------------------------------------
def test5(a, b):
	print a, b
test5(a=30, b=40)
test5(b=30, a=40)














-----------------------------------------------------------------------------
x=100
print x
def test6():
	#global x
	x=200
	print x
test6()
print x

-------------------------------------------------------------------------------
#Same name in same scope => overwriting
#Same name in different scope => LEGB
#                               local  enclosed   global   builtin
#-----------------------------------------------------------------------------




if (1):
	print "hi"
if (0):
	
-----------------------------------------------------------------------------
if (expr1):
	st1
else:
	

---------------------------------------------------------------------------
def test7(a=10, b=20):
	print a, b
test7(30, 40)
test7(70)
test7()
test7(b=90)




-------------------------------------------------------------------------------
def test8(a=10, b):
	print a, b
test8(30, 40)






























#params
#a, b                      - P
#a, b=                    - P
#a=, b=                 - P
#a=, b                   - NP
-------------------------------------------------------------------------------	
def test9(a, b=30):
	print a, b
test9(10, 60)
test9(70)
test9()




















------------------------------------------------------------------------------
#recursion is available
#threshold => 990 times
#implement factorial a) using iteration b) using recursion
def   fn1():
	print "hi"
	fn1()
fn1()
























-----------------------------------------------------------------------------
def OutsideFn():
	print "Outside"
	def InsideFn():
		print "Inside"			
	InsideFn()
OutsideFn()













x=100
x=200










---------------------------------------------------------------------------------------------





























-------------------------------------------------------------------------------
dct1={10:20, "Sachin":99}
print dct1
def dcttest(dct2):
	dct2[10] = 50
	dct2["Sachin"] += 3
	print dct2
dcttest(dct1)
print dct1











#write the code where in original dictionary should not be updated
#by taking copy
-------------------------------------------------------------------------------
int1=10
print int1
def inttest(int2):
	int2 = 20
	print int2
inttest(int1)
print int1








str1="Sachin"
print str1[0]   - P/NP?
str1[0]='X'      - P/NP?




File handling
------------------

open("       ",              "   ")
    NameOfTheFile    Mode

f1=open("a.txt", "r")

dummy file 

a.txt
----------------------
This is line 1
This is line 2
This is line 3
------------------------------------------------------------
>>>f1=open("a.txt", "r")
>>>dir(f1)
>>>type(f1.read)
>>>help(f1.read)
>>>print f1.read()
>>>f1.close()
-------------------------------------------------------------

x=20

str1="Sachin"
print str1[0]    - P/NP?
str1[0]='X'       - P/NP?


#write the code where org int should be updated
#a) global  b) ret and assign back
--------------------------------------------------------------------------------
dct1={10:20, "Sachin":99}
print dct1
def dcttest(dct2):
	dct2[10] = 50
	dct2["Sachin"] += 3
	print dct2
dcttest(dct1)
print dct1
-------------------------------------------------------------------------------
def test11(*pos, **kwd):
	print "positional", pos
	print "keyword", kwd
test11(10,20,a=30,b=40)
test11(50,70)
test11(a=70,b=90)
test11()
































File handling
--------------------
open("           ",     "  ")
NameOfTheFile   Mode

f1=open("a.txt", "r")
















create a dummy file a.txt
-----------------------------------
This is line 1
This is line 2
This is line 3
-----------------------------------

>>>f1=open("a.txt", "r")
>>>dir(f1)
>>>type(f1.read)
>>>help(f1.read)
>>>print f1.read()
>>>f1.close()

* Instead of hard coding the file name in program,
   get it via command line argument
---------------------------------------------------------------------------------------------
Other expts (file handling)

* display contents of a file (above one)=> check for error cases also
* copy contents of a file to another file
* print a) number of chars b) number of words c) number of lines of a file
* write and read back a) without seek b) with seek
---------------------------------------------------------------------------------------------
File existing or not
1. import os
os.path.exists(         )

2. import os
os.path.isfile(         )

3. Exception=>IOError

---------------------------------------------------------------------
Calculator exercise updatation using file handling
---------------------------------------------------------------------






















Reading contents of an xls file
-------------------------------------------
very common very frequent?
very common less frequent?
less common less frequent?

help("modules")
excel    pyexcel    xls    xlrd   ......





















1) goto net and download

2)
$pip install xlrd
















c:\Python27\Scripts 
                                       pip install xlrd


--------------------------------------------------------------------------------------------------------
Manually create an xls file and put some contents
--------------------------------------------------------------------------------------------------------
>>>import xlrd 
#or  >>> update path variable (if module is installed in non std folder)
>>>dir(xlrd)
>>>x=xlrd.open_workbook("test1.xls")    #with path, if in other folder
>>>dir(x)
>>>y=x.sheet_by_index(0)
>>>dir(y)
>>>z=y.cell_value(0,0)
>>>print z 
------------------------------------------------------------------------------------------------------
Python => core + 
               available modules + 
               downloadable modules +
               user created modules
------------------------------------------------------------------------------------------------------











Exception handling
---------------------------
try:
	a=10/1
	#a=10/0
	#raise ZeroDivisionError
except ZeroDivisionError:
	print "divide by zero occurred"
else:
	print "in else block"
	import sys
	sys.exit()
finally:
	print "in finally block"

NameError     TypeError    IndexError      ValueError     ZeroDivisionError
IOError           ImportError  Exception
-------------------------------
if (1):
	print "hi"
if (0):
	pass	
----------------------------------
if (expr):
	st1
else:
	pass
----------------------------------

------------------------------------------------------------------------------
Calculator exercise=> using exception
------------------------------------------------------------------------------------------------
Day 1 => Basics, contaniners, modules
Day 2 => Functions, files, exceptions
Day 3 => classes, packages, regular expressions, 
                other information
-------------------------------------------------------------------------------------------------
class A:
	def __init__(self):
		self.x=10
		self._y=20
		self.__z=30
	def  fn1(self):
		print "In fn1"
	def  _fn2(self):
		print "In _fn2"
	def  __fn3(self):
		print "In __fn3"
m=A()                   
print m.x
print m._y
print m.__z         
m.fn1()                  
m._fn2()
m.__fn3()           
--------------------------------------------------------------------------------

-------------------------------------------------------------------
* Upgrade the calculator exercise using classes
-------------------------------------------------------------------

a.b
x.y()
i=j()

-----------------------
>>>dir(__builtins__)
>>>type(input)
>>>type(str)
-----------------------
>>>str="abcd"
>>>dir(str)
#>>>del str
>>>str(45)                  #LEGB                      
-------------------------


a.b
x.y()
i=j()
--------------------------------
dir(__builtins__)
--------------------------------

>>>str="abcd"
>>>dir(str)
#>>>del str
>>>str(45)                               #LEGB













a.b
x.y()
i=j()
-------------------------
dir(__builtins__)
-------------------------
>>>str="abcd"
>>>dir(str)
>>>del str
>>>str(10)    #LEGB
----------------------------























a.b
x.y()
i=j()

------------------------
>>>str="abcd"        - P
>>>dir(str)               - P
#>>>del str
>>>str(45)                - NP      -  LEGB
>>>x="xyz"







x.y()
i=j()

------------------------------

>>>str="abcd"     - P
>>>dir(str)             - P
>>>str(45)             - NP      -  LEGB
------------------------------------------------------------------------------------------










x.y()
i=j()
----------------------------------------------------------------------------
>>>str="abcd"
>>>dir(str)
>>>del str
>>>str(10)                      #LEGB












a.b
x.y()
i=j()

------------------------------------------
str="abcd"   - P
dir(str)           - P
del str
str(10)            - NP                   LEGB



str="abcd"     - P
dir(str)            - P
str(10)            - NP       LEGB






class Shape:
	def __init__(self, x, y):
		self.x=x
		self.y=y
	def area(self):
		return self.x*self.y
	def perimeter(self):
		return 2*self.x+2*self.y
myShape=Shape(10,20)
print myShape.area()
print myShape.perimeter()







---------------------------------------------------------------------------------
class Square(Shape):
	def __init__(self, x):
		Shape.__init__(self, x, x)
		#self.x=x
		#self.y=x
mySquare=Square(25)
print mySquare.area()                   
print mySquare.perimiter()
-------------------------------------------------------------------------------
class DoubleSquare(Square):
	def __init__(self, y):
		self.x=y
		self.y=2*y
	def perimeter(self):
		return 2*self.x+3*self.y
myDoubleSquare=DoubleSquare(45)
print myDoubleSquare.area()
print myDoubleSquare.perimiter()
-------------------------------------------------------------------------------
#Try multiple inheritance also
Class A having i and fn1
Class B having j and fn2
Class C additionally having k and fn3
Create object of class C and access i, j, k, fn1, fn2, fn3













class C(A,B):
	def __init__(self, i, j, k):
		A.__init__(self, i)      #or self.i=...
		B.__init__(self, j)      #or self.j=...
		self.k=k		





Multi-level
------------------
Shape
   ^
    |
Square
   ^
    |
DoubleSquare
 
#try multiple inheritance also
---------------------------------------------------

#Try multiple inheritance also
A                       B
^                        ^
|                          | 
------------------------
              |
             C

Class A having i and fn1
Class B having j and fn2
Class C additionally having k and fn3

class C(A,B):
	def __init__(self, i, j, k):
		A.__init__(self, i)      #or self.i=...
		B.__init__(self, j)      #or self.j=...
		self.k=k		

-------------------------------------------------------------------------------
class Employee:
	empcount=0
	def __init__(self):
		Employee.empcount += 1
	def displaycount(self):
		return Employee.empcount
	#@staticmethod
	#def displaycount():
	#	return Employee.empcount

emp1=Employee()
print emp1.displaycount()         
emp2=Employee()
print emp2.displaycount()         
print emp1.displaycount()         
--------------------------------------------------------------------------------
#add salary also and verify, 
verify with destructor also
--------------------------------------------------------------------------------
class D:
	def __init__(self, start):
		self.data=start
	def __sub__(self, other):
		return D(self.data - other)
	def displaydata(self):
		return self.data
X=D(7)
Y=X-4
Y.displaydata()


'2'+'3' => '23'
'2'*3   => '222'







'2'+'3' =>  '23'
'2'*3  =>  '222'

dir, help  on integer also string













----------------------------------------------------------------------------
Types of importing
-------------------------------
import math
from math import pi
from math import pi,sin
from math import *
from math import pi as pi_1
#or
from math import pi
pi_1=pi 
pi_1=...
pi_2=pi

----------------------------------------------------------------------------


>>>import os
>>>dir(os)
>>>type(os.sys)









 
-------------------------------------------------------------
>>>x=100
>>>globals()
{             ,'x':100             }
>>>import os
>>>globals()
>>>del os
>>>globals()
------------------------------------------------------------
















Package
--------------
/home/vinod/PythonPrograms/phone
                                                                  /isdn.py
                                                                  /g3.py
 			            /pots.py
			            /__init__.py
                                                     /sample.py
isdn.py
--------------------
def isdn():
	print "I am isdn"
|||ly for g3.py and pots.py
__init__.py
--------------------
from isdn import isdn
from g3 import g3
from pots import pots

sample.py
----------------
import phone

phone.isdn()
phone.g3()
phone.pots()

2nd way
------------
init

import isdn

sample.py
----------------
import phone
phone.isdn.isdn()
--------------- .  ----()
              x    .    y()

3rd way

init balnk

sample.py
--------------
from phone import isdn
isdn.isdn()
















import phone
phone.isdn.isdn()
---------------  . -----
          x         . y     ()


from phone import isdn
isdn.isdn()




--------------------------------------------------------------------------
Python   =>   core
                        +
	available modules, packages
                        +
	downlodable modules, packages
                        +
	user created modules, packages
---------------------------------------------------------------------------------









Regular expression
---------------------------
$dir *.py                     $ls *.py

$grep -irHn "abcd"          *
                       reg expr     glob

Styles
----------
1. glob / wild card / meta char
2. reg expr
-------------------------------------------------------------------------------
Print names of all python files in current folder
import os
print os.system("ls *.py")       #dir, if windows

import glob
print glob.glob("*.py")
-------------------------------------------------------------------------------
print number of abc's in the below string
str1="Abc def abc"

print str1.count("abc")

import re
print re.findall("abc", str1)
print re.findall("abc", str1, re.IGNORECASE)
-----------------------
>>>import re
>>>dir(re)
>>>help(re)



Glob
-------
?    - a char
*     - any char any number of times

a.py    ij.py   mno.py

?.py          -       a.py
??.py        -       ij.py
???.py      -       mno.py
*.py           -       a.py   ij.py   mno.py









Information
-----------------
pyc


lst1=[10,20,30]
lst2=lst1               #???????????
lst3=lst1[:]
lst4=list(lst1)

print them

print id(lst1), id(lst2), id(lst3), id(lst4)

lst2.append(40)
print lst2
print lst1


a=4
b=2
        6     4
a,b=a+b,a
print a,b
---------------------

a=(3,4)    <=> a=3,4


tup1=(10)

a,b=5,7    <=>  a,b=(5,7)





































Reg expr
--------------
Styles of pattern matching
-------------------------------------
1. glob / wild char / meta char
$ls *.py

2. reg expr
$grep -irHn "abcd"       *
                     reg expr   glob
-------------------------------------------------------------
1. print names of all python files in the current folder
import os
print os.system("dir *py")        #ls for Linux

import glob
print glob.glob(*.py")
-------------------------------------------------------------------
2. print number of abc's in below string
str1="Abc def abc"
print str1.count("abc")

import re
print re.findall("abc", str1)
print re.findall("abc", str1, re.IGNORECASE)
--------------------------------------------------------------------
glob
------
?          a single char
*           any char any number of times

a.py    ij.py   mno.py

?.py      a.py
??.py    ij.py
???.py  mno.py
*.py       a.py  ij.py   mno.py
----------------------------------------------------------------
Reg expr
------------
char     meaning           pattern              strings
------     ------------            -----------          --------------
.         a single char          i.j            iaj ibj...izj iAj...iZj i0j..i9j  i.j
?        0 or 1 occ               a?b         0/1 a b=>   b ab    
          of prev reg expr
*         0 or more occ        ab*cd      acd abcd abbcd ......
          of prev reg expr
+        1 or more occ        ab+cd      abcd abbcd ..... 
          of prev reg expr   
[ ]       Range                    i[a]j          iaj
                                         i[aA]j        iaj  iAj
                                         i[aA]+j      iaj  iAj  iaaj  iAAj  iaAj   iAaj
                                       i[a-z]j         iaj ibj.....izj
		    i[a-zA-Z]j    iaj ibj.....izj  iAj iBj.....iZj
		   i[a-zA-Z0-9]j  
                                    i[a-z A-Z 0-9]j  
                                    i[a-z,A-Z,0-9]j  
[^ ]     Negated range   i[^a]j             ibj .............   
		 i[^aA]j
                                   i[^a-z]j
                                   i[^a-zA-Z]j
                                   i[^a-zA-Z0-9]j 
                                   i[a-z^A-Z]j       iaj....izj i^j  iAj ....iZj
{   }     min max          a{1,2}b             ab  aab
                                   a{3,}b               
		 a{,4}b
		 a{7}b   
                                   a{7,7}b
( )       grouping         (ab)+cd            abcd  ababcd .......

Anchor elements
-----------------------
^      at the beg
$      at the end

Misc
-------
\n    newline
\s    white space
\d    digit
\S    non white space

str1="SG SG SG SG"
import re
print re.findall("SG", str1)  #    "^SG"    "SG$"      "^SG$" 




















Information
-----------------
pyc







-------------------------------
lst1=[10,20,30]
lst2=lst1                   
lst3=lst1[:]
lst4=list(lst1)

print id(lst1), id(lst2), id(lst3), id(lst4)

lst2.append(40)
print lst2
print lst1



lst2=lst1                    
lst3=lst1[:]
lst4=list(lst1)

print id(lst1), id(lst2), id(lst3), id(lst4)

lst2.append(40)
print lst2
print lst1
------------------------------
a=4
b=2
         6     4
a,b=a+b, a
print a, b


a=(3,4)   <=>  a=3,4

tup1=(10)
print tup1
type(tup1)

tup1=(10,)  #or 10,
print tup1
type(tup1)

a,b=3,4   <=>   a,b=(3,4)

a,b=3,4,5

a=3,4,5
a,b=3,(4,5)
a,b=(3,4),5
a,b,c=3,4,5

a,b,c=3,4

var1=10
var2=20
o/p=> var1 is 10 var2 is 20
print "var1 is", var1, "var2 is", var2
print "var1 is %d var2 is %d"%(var1, var2)















































------------------------------
a=(3,4) <=> a=3,4

























a=3,4
------------------------------
tup1=(10)
tup1=(10,)  #or tup1=10,
---------------------------------
a,b=5,7
-----------------------------------
a=5,7
----------------------------------
a,b=5,6,7
---------------------------------
a,b,c=5,6
----------------------------------
a=5,6,7
a,b,c=5,6,7
a,b=5,(6,7)
a,b=(5,6),7
------------------------------------
var1=10
var2=20
o/p=> var1 is 10 var2 is 20
print "var1 is", var1, "var2 is", var2
print "var1 is %d var2 is %d"%(var1,var2)
--------------------------------------
>>>items=[1,2,3]
>>>def sqr(x):
	return x*x
>>>map(sqr, items)
>>>map(lambda x:x*x, items)
>>>filter(lambda x:x<3, items)
>>>reduce(lambda x,y:x+y, items)



















------------------------------------------------------------
>>>[x     for x in range(10)    if(x%2)]
------------------------------------------------------------- 
















-------------------------------------------------------------
lst1=[10,20,30]
10 in lst1
40 in lst1
dct1={10:20, 30:40}
10 in dct1
60 in dct1
20 in dct1
-------------------------------------------------------------
--------------------------------------
>>>items=[1,2,3]
>>>def sqr(x):
	return x*x
>>>map(sqr, items)
>>>map(lambda x:x*x, items)
>>>filter(lambda x:x<3, items)
>>>reduce(lambda x,y:x+y, items)

builtins
-------------
set, reload, globals

modules
-----------------
shutil, subprocess, multiprocessing
thread, threading, sqlite3 =>data base, GUI=> tkinter, wxpython
urllib2 => web, smtplib => email 
testing => doctest, unittest
list, array, numpy, scipy, pandas, scikit, nltk
image, profile, cProfile, selenium
-----------------------------------------------------------------------------
django
---------------------------------------------------------------------------
standard: pep8
tools: pip, pep8checker, pylint
-----------------------------------------------------
extending, embedding, stand alone
-----------------------------------------------------
* python.org  ===> documentation
                                --- lang ref
	              --- lib ref
                                --- turorial
-------------------------------------------------------
-----------------------------------
Vinod Kulkarni
+919945732510
vinodkallagi@gmail.com
Also on LinkedIn
-----------------------------------



